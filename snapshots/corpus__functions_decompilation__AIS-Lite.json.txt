{
  "4198400:_init": "extern struct_0 *g_407cb4;\n
\n
int _init()\n
{\n
    if (g_407cb4)\n
    {\n
        g_407cb4();\n
        return;\n
    }\n
    return;\n
}\n
",
  "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
",
  "4198464:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
",
  "4198480:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
",
  "4198496:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
",
  "4198512:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
",
  "4198528:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
",
  "4198544:sub_401090": "int sub_401090()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
",
  "4198550:sub_401096": null,
  "4198560:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
",
  "4198603:sub_4010cb": null,
  "4198604:sub_4010cc": "int sub_4010cc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
",
  "4198608:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
",
  "4198612:sub_4010d4": null,
  "4198624:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 27611;\n
    v6 = v5 + 39;\n
    v7 = v5 + 39;\n
    if (v7 == v6)\n
        return v5 + 39;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
",
  "4198675:sub_401113": "int sub_401113()\n
{\n
}\n
",
  "4198681:sub_401119": "int sub_401119()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
",
  "4198688:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 27547;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 39;\n
    v9 = (v6 + 39 - (v6 + 39) >> 31) + (39 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
",
  "4198759:sub_401167": "int sub_401167()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
",
  "4198768:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_407cb0;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_407cb0)\n
    {\n
        v0 = __dso_handle;\n
        sub_401090();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
",
  "4198843:sub_4011bb": "int sub_4011bb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
",
  "4198848:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
",
  "4198857:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
",
  "4198861:sub_4011cd": null,
  "4198864:cgc_is_hex_digit": "int cgc_is_hex_digit(char v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (65 <= v1 && 70 >= v1)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    if (97 <= v1 && 102 >= v1)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    if (48 <= v1 && 57 >= v1)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
",
  "4199024:cgc_ascii_hex_to_bin": "int cgc_ascii_hex_to_bin(char v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    if (65 <= v2 && 70 >= v2)\n
    {\n
        v1 = v2 + -55;\n
        return v1;\n
    }\n
    if (97 <= v2 && 102 >= v2)\n
    {\n
        v1 = v2 + -87;\n
        return v1;\n
    }\n
    if (48 <= v2 && 57 >= v2)\n
    {\n
        v1 = v2 - 48;\n
        return v1;\n
    }\n
    v1 = 255;\n
    return v1;\n
}\n
",
  "4199197:sub_40131d": null,
  "4199200:cgc_int2str": "int cgc_int2str(unsigned int v4, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
    char *v5;  // ecx\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
\n
    v2 = 0;\n
    if (a0 < 2)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    if (a1 >= 0)\n
    {\n
        a1 *= -1;\n
    }\n
    else if (a0 >= 3)\n
    {\n
        v5 = v2;\n
        v2 = v5 + 1;\n
        v5[v4] = 45;\n
    }\n
    else\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    v1 = a1;\n
    do\n
    {\n
        v2 += 1;\n
        v6 = v1;\n
        v1 = (v6 >> 31 CONCAT v6) /m 10;\n
    } while (v1 < 0);\n
    if (v2 >= a0)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    v7 = v2;\n
    v2 = v7 - 1;\n
    *((v4 + v7)) = 0;\n
    do\n
    {\n
        v0 = ((a1 >> 31 CONCAT a1) /m 10 >> 32) * -1;\n
        v8 = v2;\n
        v2 = v8 - 1;\n
        *((v4 + v8)) = v0 + 48;\n
        v9 = a1;\n
        a1 = (v9 >> 31 CONCAT v9) /m 10;\n
    } while (a1 < 0);\n
    v3 = 0;\n
    return v3;\n
}\n
",
  "4199473:sub_401431": null,
  "4199488:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned int field_28;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v13)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    void* v1;  // [bp-0x38], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned int *v3;  // [bp-0x30], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x29]\n
    unsigned int v5;  // [bp-0x28]\n
    struct_0 *v6;  // [bp-0x24]\n
    unsigned int *v7;  // [bp-0x20]\n
    unsigned int *v8;  // [bp-0x1c]\n
    unsigned int v9;  // [bp-0x18]\n
    unsigned int v10;  // [bp-0x14]\n
    unsigned int *v11;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v12;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v14;  // ebx\n
    unsigned int v15;  // eax\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v11 = 0;\n
    if ((v13 + 3 & -0x4) + 8 < v13)\n
    {\n
        v12 = 0;\n
        return v12;\n
    }\n
    v13 = (v13 + 3 & -0x4) + 8;\n
    if (v13 < v6->field_28)\n
        v13 = v6->field_28;\n
    if (v13 > 4095)\n
    {\n
        v12 = cgc_allocate_large_chunk();\n
        return v12;\n
    }\n
    v5 = cgc_log_base_two();\n
    v10 = v5 - cgc_log_base_two();\n
    if (v10 >= 8)\n
    {\n
        v12 = 0;\n
        return v12;\n
    }\n
    while (true)\n
    {\n
        v4 = 0;\n
        if (!v11)\n
            v4 = v10 < 8;\n
        if (!(v4 & 1))\n
            break;\n
        v14 = v6;\n
        v15 = v10;\n
        v10 = v15 + 1;\n
        v0 = v13;\n
        v9 = cgc_list_find(&v14[3].padding_0[28 + 8 * v15], v14 + 588);\n
        if (!v9)\n
            v3 = 0;\n
        else\n
            v3 = -5 + v9;\n
        v8 = v3;\n
        v11 = v8;\n
    }\n
    if (!v11)\n
    {\n
        v11 = cgc_grow_heap();\n
    }\n
    else\n
    {\n
        v7 = v11;\n
        v2 = &v6[3].padding_0[28 + 8 + 8 * v10];\n
        if (!v7)\n
            v1 = 0;\n
        else\n
            v1 = v7 + 1;\n
        cgc_list_remove(v2);\n
    }\n
    cgc_mark_allocated();\n
    if ((*(v11) & -2) > v13)\n
        v11 = cgc_split_chunk(v11);\n
    v12 = cgc_chunk_to_ptr();\n
    return v12;\n
}\n
",
  "4200046:sub_40166e": null,
  "4200048:cgc_allocate_large_chunk": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_allocate_large_chunk(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_allocate(v5, 0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    *(v2) = v5;\n
    cgc_mark_allocated();\n
    v3 = cgc_chunk_to_ptr();\n
    return v3;\n
}\n
",
  "4200170:sub_4016ea": null,
  "4200176:cgc_log_base_two": "int cgc_log_base_two(unsigned int v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v1 >>= 1;\n
        if (!v1)\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
",
  "4200230:sub_401726": null,
  "4200240:cgc_list_find": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_find(struct struct_0 **v4, struct struct_0 **a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    struct struct_0 **v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct struct_0 **v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &*(v4)->field_0;\n
    while (true)\n
    {\n
        if (v2)\n
        {\n
            v0 = a1;\n
            if (a0(v2))\n
            {\n
                v3 = v2;\n
                return v3;\n
            }\n
            v2 = *(v2);\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
}\n
",
  "4200364:sub_4017ac": null,
  "4200368:cgc_find_fit": "int cgc_find_fit(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int *v0;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
\n
    v4 = a0;\n
    v2 = v5;\n
    if (!v2)\n
        v0 = 0;\n
    else\n
        v0 = -5 + v2;\n
    v1 = v0;\n
    v3 = v1;\n
    return !((*(v3) & -2) < v4);\n
}\n
",
  "4200468:sub_401814": null,
  "4200480:cgc_grow_heap": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_grow_heap()\n
{\n
    struct struct_0 **v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_allocate(0x1000, 0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    *(v2) = 0x1000;\n
    cgc_mark_free();\n
    v3 = v2;\n
    return v3;\n
}\n
",
  "4200590:sub_40188e": null,
  "4200592:cgc_list_remove": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
int cgc_list_remove(unsigned int v0[2], struct_0 *a0)\n
{\n
    unsigned int v1;  // eax\n
\n
    if (!a0)\n
        return v0;\n
    if (!a0->field_4)\n
        v0[0] = a0->field_0;\n
    else\n
        a0->field_4->field_0 = a0->field_0;\n
    if (!a0->field_0)\n
    {\n
        v1 = v0;\n
        *((v1 + 4)) = a0->field_4;\n
        return v0;\n
    }\n
    v1 = a0->field_0;\n
    *((v1 + 4)) = a0->field_4;\n
    return a0->field_0;\n
}\n
",
  "4200702:sub_4018fe": null,
  "4200704:cgc_mark_allocated": "int cgc_mark_allocated(unsigned int *v0)\n
{\n
    unsigned int *v1;  // eax\n
\n
    v1 = v0;\n
    *(v1) = *(v1) | 1;\n
    *((-4 + v0 + (*(v0) & -2))) = *(v0);\n
    return v0;\n
}\n
",
  "4200742:sub_401926": null,
  "4200752:cgc_split_chunk": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int size_class_sizes;\n
\n
int cgc_split_chunk(unsigned int *v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v4 + a0;\n
    v1 = *(v4) & -2;\n
    if ((*(v4) & -2) <= a0 + size_class_sizes)\n
    {\n
        v3 = v4;\n
        return v3;\n
    }\n
    *(v4) = a0;\n
    cgc_mark_allocated(v4);\n
    *(v2) = v1 - a0;\n
    cgc_mark_allocated(v2);\n
    cgc_chunk_to_ptr();\n
    cgc_free();\n
    v3 = v4;\n
    return v3;\n
}\n
",
  "4200923:sub_4019db": null,
  "4200928:cgc_chunk_to_ptr": "int cgc_chunk_to_ptr(unsigned int v0)\n
{\n
    return v0 + 4;\n
}\n
",
  "4200946:sub_4019f2": null,
  "4200960:cgc_free": "typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned int field_28;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    struct_0 *v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int *v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int *v8;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v9;  // ebx\n
\n
    v5 = v7;\n
    v2 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v8 = cgc_ptr_to_chunk();\n
    v4 = v8;\n
    if (!v6)\n
        return v8;\n
    cgc_mark_free();\n
    v4 = cgc_coalesce();\n
    v1 = cgc_log_base_two(*(v4) & -2);\n
    v3 = v1 - cgc_log_base_two(v2->field_28);\n
    if (v3 >= 8)\n
        v3 = 7;\n
    v9 = v2;\n
    v0 = &v9[550].padding_0[24];\n
    v8 = cgc_list_insert_in_order(&v9[3].padding_0[28 + 8 * v3], v4 + 1);\n
    return v8;\n
}\n
",
  "4201162:sub_401aca": null,
  "4201168:cgc_ptr_to_chunk": "int cgc_ptr_to_chunk(unsigned int v3)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    if (!v2)\n
        v0 = 0;\n
    else\n
        v0 = -5 + v2;\n
    v1 = v0;\n
    return v1;\n
}\n
",
  "4201237:sub_401b15": null,
  "4201248:cgc_mark_free": "int cgc_mark_free(unsigned int *v0)\n
{\n
    unsigned int *v1;  // eax\n
\n
    v1 = v0;\n
    *(v1) = *(v1) & -2;\n
    *((-4 + v0 + (*(v0) & -2))) = *(v0);\n
    return v0;\n
}\n
",
  "4201286:sub_401b46": null,
  "4201296:cgc_coalesce": "typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned int field_28;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_-4;\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(struct_1 *v12)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned int\n
    unsigned int v1[2];  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    void* v3;  // [bp-0x2c], Other Possible Types: unsigned int\n
    unsigned int v4[2];  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x24]\n
    struct_0 *v6;  // [bp-0x20]\n
    unsigned int *v7;  // [bp-0x1c]\n
    unsigned int *v8;  // [bp-0x18]\n
    unsigned int v9;  // [bp-0x14]\n
    unsigned int *v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int *v11;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v11 = 0;\n
    v10 = 0;\n
    if ((v12 & 4095))\n
        v10 = v12 + -(v12->field_0 & -2);\n
    if (((v12 + (v12->field_-4 & -2)) & 4095))\n
        v11 = v12 + (v12->field_-4 & -2);\n
    if (v10 && !(*(v10) & 1))\n
    {\n
        v5 = cgc_log_base_two(*(v10) & -2);\n
        v9 = v5 - cgc_log_base_two(v6->field_28);\n
        if (v9 < 8)\n
        {\n
            v8 = v10;\n
            v4[0] = &v6[3].padding_0[28 + 8 * v9];\n
            if (!v8)\n
                v3 = 0;\n
            else\n
                v3 = v8 + 1;\n
            cgc_list_remove(v4, v3);\n
            *(v10) = (v12->field_-4 & -2) + (*(v10) & -2);\n
            cgc_mark_free(v10);\n
            v12 = v10;\n
        }\n
    }\n
    if (!v11)\n
    {\n
        return v12;\n
    }\n
    else if ((*(v11) & 1))\n
    {\n
        return v12;\n
    }\n
    else\n
    {\n
        v2 = cgc_log_base_two(*(v11) & -2);\n
        v9 = v2 - cgc_log_base_two(v6->field_28);\n
        if (v9 >= 8)\n
            return v12;\n
        v7 = v11;\n
        v1[0] = &v6[3].padding_0[28 + 8 * v9];\n
        if (!v7)\n
            v0 = 0;\n
        else\n
            v0 = v7 + 1;\n
        cgc_list_remove(v1, v0);\n
        *(v12) = (*(v12) & -2) + (*(v11) & -2);\n
        cgc_mark_free(v12);\n
    }\n
}\n
",
  "4201849:sub_401d79": null,
  "4201856:cgc_list_insert_in_order": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_insert_in_order(struct struct_0 **v3, unsigned int a0, struct struct_0 **a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    struct struct_0 **v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &*(v3)->field_0;\n
    while (true)\n
    {\n
        if (!v2)\n
        {\n
            v4 = cgc_list_push_back(v3);\n
            return v4;\n
        }\n
        else if (a1(a0) < 0)\n
        {\n
            v2 = *(v2);\n
        }\n
        else\n
        {\n
            v0 = a0;\n
            v4 = cgc_list_insert_before(v3, v2);\n
            return v4;\n
        }\n
    }\n
}\n
",
  "4202013:sub_401e1d": null,
  "4202016:cgc_size_cmp": "int cgc_size_cmp(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int *v0;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int *v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int *v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int *v4;  // [bp-0x14]\n
    unsigned int *v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int *v7;  // [bp-0x8]\n
\n
    v6 = v8;\n
    if (!v6)\n
        v1 = 0;\n
    else\n
        v1 = -5 + v6;\n
    v5 = v1;\n
    v7 = v5;\n
    v3 = a0;\n
    if (!v3)\n
        v0 = 0;\n
    else\n
        v0 = -5 + v3;\n
    v2 = v0;\n
    v4 = v2;\n
    return (*(v4) & -2) - (*(v7) & -2);\n
}\n
",
  "4202167:sub_401eb7": null,
  "4202176:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_malloc(v4);\n
    if (v2)\n
    {\n
        v0 = v4;\n
        cgc_memset(v2, 0);\n
        return v2;\n
    }\n
    return v2;\n
}\n
",
  "4202265:sub_401f19": null,
  "4202272:cgc_realloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_realloc(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v8)\n
    {\n
        v7 = cgc_malloc(a0);\n
        return v7;\n
    }\n
    v6 = (*(cgc_ptr_to_chunk(v8)) & -2) - 8;\n
    if (a0 == v6)\n
    {\n
        v7 = v8;\n
        return v7;\n
    }\n
    v5 = cgc_malloc(a0);\n
    v2 = v5;\n
    v3 = v8;\n
    if (a0 < v6)\n
        v1 = a0;\n
    else\n
        v1 = v6;\n
    v0 = v1;\n
    cgc_memcpy(v2, v3);\n
    cgc_free(v8);\n
    v7 = v5;\n
    return v7;\n
}\n
",
  "4202495:sub_401fff": null,
  "4202496:cgc_list_insert_before": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    struct struct_2 *field_4;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[4];\n
    struct struct_2 *field_4;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
int cgc_list_insert_before(struct_1 *v0, struct_3 *a0, unsigned int a1[2])\n
{\n
    struct_1 *v1;  // eax, Other Possible Types: unsigned int, struct_3 *\n
    unsigned int v2[2];  // ecx\n
\n
    if (!a1)\n
        return v0;\n
    a1[1] = 0;\n
    a1[0] = 0;\n
    if (!v0->field_0 && !v0->field_4)\n
    {\n
        v2 = a1;\n
        v0->field_4 = &v2[0];\n
        v1 = v0;\n
        *(v1) = v2;\n
        return v0;\n
    }\n
    if (!a0)\n
    {\n
        a1[1] = v0->field_4;\n
        v0->field_4->field_0 = a1;\n
        a1[0] = 0;\n
        v1 = v0;\n
        v1->field_4 = &a1[0];\n
    }\n
    else if (a0 == v0->field_0)\n
    {\n
        a1[0] = v0->field_0;\n
        v0->field_0->field_4 = a1;\n
        a1[1] = 0;\n
        v1 = v0;\n
        v1->field_0 = &a1[0];\n
    }\n
    else\n
    {\n
        a1[1] = a0->field_4;\n
        a1[0] = a0;\n
        a0->field_4->field_0 = a1;\n
        v1 = a0;\n
        v1->field_4 = &a1[0];\n
    }\n
    return v1;\n
}\n
",
  "4202752:cgc_list_push_back": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_list_push_back(struct_0 *v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a0;\n
    return cgc_list_insert_after(v1, v1->field_4);\n
}\n
",
  "4202811:sub_40213b": null,
  "4202816:cgc_list_insert_after": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_insert_after(void* *v1, void* *a0, unsigned int a1[2])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0)\n
    {\n
        v2 = cgc_list_insert_before(v1, *(a0), a1);\n
        return v2;\n
    }\n
    v2 = cgc_list_insert_before(v1, *(v1), a1);\n
    return v2;\n
}\n
",
  "4202928:cgc_memcpy": "int cgc_memcpy(char *v2, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
\n
    v1 = v2;\n
    v0 = a0;\n
    while (true)\n
    {\n
        v3 = a1;\n
        a1 = v3 - 1;\n
        if (!v3)\n
            break;\n
        *(v1) = *(v0);\n
        v1 += 1;\n
        v0 += 1;\n
    }\n
    return v2;\n
}\n
",
  "4203016:sub_402208": null,
  "4203024:cgc_memset": "int cgc_memset(char *v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; a1 > 0; a1 -= 1)\n
    {\n
        *(v0) = a0;\n
        v0 += 1;\n
    }\n
    return v1;\n
}\n
",
  "4203094:sub_402256": null,
  "4203104:cgc_recv_until_delim": "typedef struct struct_0 {\n
    char field_-1;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_recv_until_delim(unsigned int v5, struct_0 *a0, unsigned int a1, char a2)\n
{\n
    struct_1 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    struct_0 *v6;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    if (!a1)\n
    {\n
        v4 = -9;\n
        return v4;\n
    }\n
    else if (a0)\n
    {\n
        while (a1)\n
        {\n
            v6 = a0;\n
            a0 = v6 + 1;\n
            v0 = &v3;\n
            if (cgc_receive(v5, v6, 1))\n
            {\n
                v4 = -9;\n
                return v4;\n
            }\n
            v2 += 1;\n
            a1 -= 1;\n
            if (*((a0 - 1)) == a2)\n
                break;\n
        }\n
        if (*((a0 - 1)) != a2)\n
        {\n
            v4 = -9;\n
            return v4;\n
        }\n
        v4 = v2;\n
        return v4;\n
    }\n
    else\n
    {\n
        v4 = -9;\n
        return v4;\n
    }\n
}\n
",
  "4203369:sub_402369": null,
  "4203376:cgc_send": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_send(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = a0;\n
    if (cgc_sendall(1, v3))\n
    {\n
        cgc__terminate();\n
        return 0;\n
    }\n
    return 0;\n
}\n
",
  "4203462:sub_4023c6": null,
  "4203472:cgc_sendall": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sendall(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18]\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    if (!a0)\n
    {\n
        v5 = -6;\n
        return v5;\n
    }\n
    if (!a1)\n
    {\n
        v5 = -6;\n
        return v5;\n
    }\n
    while (true)\n
    {\n
        if (v4 >= a1)\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        v0 = &v3;\n
        v2 = cgc_transmit(v6, a0 + v4, a1 - v4);\n
        if (v2)\n
        {\n
            v5 = -6;\n
            return v5;\n
        }\n
        v4 = v3 + v4;\n
    }\n
}\n
",
  "4203676:sub_40249c": null,
  "4203680:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; *(v1); v1 += 1)\n
    {\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
",
  "4203740:sub_4024dc": null,
  "4203744:cgc_strncmp": "int cgc_strncmp(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0xd]\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x8]\n
\n
    v1 = 0;\n
    if (!a1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (a1 > v1)\n
        {\n
            v0 = 0;\n
            if (v1[v3])\n
            {\n
                v0 = 0;\n
                if (v1[a0])\n
                    v0 = v1[v3] == v1[a0];\n
            }\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        v1 += 1;\n
    }\n
    if (a1 == v1)\n
        v1 -= 1;\n
    if (*((v3 + v1)) == *((a0 + v1)))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (*((v3 + v1)) <= *((a0 + v1)))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = 1;\n
        return v2;\n
    }\n
}\n
",
  "4204035:sub_402603": null,
  "4204048:cgc_strncpy": "int cgc_strncpy(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a1)\n
            v0 = *((a0 + v1));\n
        if (!(v0 & 1))\n
            break;\n
        *((v2 + v1)) = *((a0 + v1));\n
        v1 += 1;\n
    }\n
    for (; v1 < a1; v1 += 1)\n
    {\n
        *((v2 + v1)) = 0;\n
    }\n
    return v2;\n
}\n
",
  "4204203:sub_4026ab": null,
  "4204208:cgc_vsnprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vsnprintf(unsigned int v11, unsigned int a0, char *a1, struct struct_0 **a2)\n
{\n
    unsigned int v0;  // [bp-0x54]\n
    unsigned int v1;  // [bp-0x50]\n
    void* v2;  // [bp-0x4c], Other Possible Types: unsigned int\n
    struct_0 *v3;  // [bp-0x48]\n
    char v4;  // [bp-0x44]\n
    struct_0 *v5;  // [bp-0x24], Other Possible Types: unsigned int\n
    char v6;  // [bp-0x1d]\n
    void* v7;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char v8;  // [bp-0x15]\n
    char *v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v12;  // eax\n
    unsigned int v13;  // ecx\n
    struct struct_0 **v14;  // eax\n
    struct struct_0 **v15;  // eax\n
    struct struct_0 **v16;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = 0;\n
    v9 = a1;\n
    if (!v9)\n
        v9 = v1 - 6958;\n
    while (true)\n
    {\n
        while (true)\n
        {\n
            do\n
            {\n
                if (!*(v9))\n
                {\n
                    if (a0 <= 0)\n
                        return v10;\n
                    if (v10 >= a0)\n
                        *((v11 + a0 - 1)) = 0;\n
                    else\n
                        *((v11 + v10)) = 0;\n
                    return v10;\n
                }\n
                if (*(v9) != 126)\n
                {\n
                    if (v10 < a0)\n
                    {\n
                        v12 = v9;\n
                        v9 = v12 + 1;\n
                        v13 = v10;\n
                        v10 = v13 + 1;\n
                        *((v11 + v13)) = *(v12);\n
                    }\n
                    else\n
                    {\n
                        v10 += 1;\n
                        v9 += 1;\n
                    }\n
LABEL_40275a:\n
                    continue;\n
                }\n
                v8 = 0;\n
                v7 = 0;\n
                v6 = 0;\n
                v5 = 0;\n
                v3 = 0;\n
                v2 = 0;\n
                v9 += 1;\n
            } while (!*(v9));\n
            v8 = *(v9);\n
            v0 = v8;\n
            if (v0 == 99)\n
            {\n
                v14 = a2;\n
                a2 = v14 + 1;\n
                v5 = *(v14);\n
                if (!v5)\n
                    v7 = 0;\n
                else\n
                    v7 = cgc_strlen(v5);\n
            }\n
            else if (v0 == 110)\n
            {\n
                v15 = a2;\n
                a2 = v15 + 1;\n
                v3 = *(v15);\n
                cgc_int2str(&v4, 32, v3);\n
                v5 = &v4;\n
                v7 = cgc_strlen(v5);\n
            }\n
            else if (v0 == 111)\n
            {\n
                v16 = a2;\n
                a2 = v16 + 1;\n
                v6 = *(v16);\n
                if (!v5)\n
                    v7 = 0;\n
                else\n
                    v7 = 1;\n
            }\n
            v9 += 1;\n
            v2 = a0 - v10;\n
            if (0 <= v2)\n
                break;\n
            v10 = &v10[v7];\n
        }\n
        if (v8 != 110 && !(v8 == 99))\n
            goto LABEL_402941;\n
        if (v7 <= v2)\n
        {\n
            cgc_memcpy(v11 + v10, v5, v7);\n
            v10 = &v10[v7];\n
        }\n
        else\n
        {\n
            cgc_memcpy(v11 + v10, v5, v2);\n
            v10 = v2 + v10;\n
        }\n
LABEL_402941:\n
        if (v8 == 111 && v7 <= v2)\n
        {\n
            *((v11 + v10)) = v6;\n
            v10 = &v10[v7];\n
        }\n
        goto LABEL_40275a;\n
    }\n
}\n
",
  "4204996:sub_4029c4": null,
  "4205008:cgc_snprintf": "int cgc_snprintf(unsigned int v4, unsigned int a0, char *a1)\n
{\n
    char **v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    char v5;  // [bp+0x10]\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // esi\n
\n
    v3 = v6;\n
    v2 = v7;\n
    v0 = &v5;\n
    v1 = cgc_vsnprintf(v4, a0, a1, v0);\n
    return v1;\n
}\n
",
  "4205088:cgc_to_english": "typedef struct struct_0 {\n
    char padding_0[16];\n
    char field_10;\n
    char field_11;\n
    char padding_12[2];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_to_english(unsigned int v5, struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char v3;  // [bp-0xd]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    if (a0->field_10 != 3)\n
    {\n
        v4 = -51;\n
        return v4;\n
    }\n
    v3 = cgc_get_msg_type();\n
    if (v3 != a0->field_11)\n
    {\n
        v4 = -51;\n
        return v4;\n
    }\n
    v1 = v3;\n
    if (v1 == 1)\n
    {\n
        v0 = a0->field_14;\n
        v4 = cgc_parse_msg_type_1(v5);\n
        return v4;\n
    }\n
    else if (v1 == 4)\n
    {\n
        v0 = a0->field_14;\n
        v4 = cgc_parse_msg_type_4(v5);\n
        return v4;\n
    }\n
    else if (v1 == 5)\n
    {\n
        v0 = a0->field_14;\n
        v4 = cgc_parse_msg_type_5(v5);\n
        return v4;\n
    }\n
    else\n
    {\n
        v4 = -51;\n
        return v4;\n
    }\n
}\n
",
  "4205370:sub_402b3a": null,
  "4205376:cgc_parse_msg_type_1": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parse_msg_type_1(unsigned int v11, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned int v3;  // [bp-0x30]\n
    unsigned int v4;  // [bp-0x2c]\n
    void* v5;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x20]\n
    char v8;  // [bp-0x1c]\n
    unsigned int v9;  // [bp-0x10]\n
    unsigned int v10;  // [bp-0x8]\n
    unsigned int v12;  // ebx\n
    unsigned int v13;  // ebx\n
    unsigned int v14;  // ebx\n
    unsigned int v15;  // ebx\n
    unsigned int v16;  // ebx\n
    unsigned int v17;  // ebx\n
    unsigned int v18;  // ebx\n
    unsigned int v19;  // ebx\n
    unsigned int v20;  // eax\n
    unsigned int v22;  // ebx\n
    unsigned int v23;  // ebx\n
    unsigned int v24;  // ebx\n
    unsigned int v25;  // eax\n
    unsigned int v27;  // ebx\n
    unsigned int v28;  // ebx\n
\n
    v10 = v12;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_init_sixer(&v8);\n
    v7 = v11;\n
    v6 = 0;\n
    v5 = 0;\n
    if (cgc_sixer_strlen(&v8) != 144)\n
    {\n
        v9 = -51;\n
        return v9;\n
    }\n
    v6 = cgc_get_bits_from_sixer(&v8);\n
    if (v6 != 1)\n
    {\n
        v9 = -51;\n
        return v9;\n
    }\n
    v13 = v4;\n
    v0 = v13 - 7066;\n
    v5 = cgc_snprintf(v7, 8, v13 - 7070);\n
    v7 = v5 + v7;\n
    v6 = cgc_get_bits_from_sixer(&v8);\n
    if (0 > v6)\n
    {\n
        v9 = -51;\n
        return v9;\n
    }\n
    v0 = v6;\n
    v5 = cgc_snprintf(v7, 11, v4 - 7044);\n
    v7 = v5 + v7;\n
    v6 = cgc_get_bits_from_sixer(&v8);\n
    if (0 <= v6 && 8 >= v6)\n
    {\n
        v14 = v4;\n
        v0 = *((v14 + v6 * 4 + 72));\n
        v5 = cgc_snprintf(v7, 28, v14 - 7070);\n
        v7 = v5 + v7;\n
        v6 = cgc_get_bits_from_sixer(&v8);\n
        if (128 < v6)\n
            v6 = cgc_sixer_bits_twos_to_sint(v6);\n
        if (!v6)\n
        {\n
            v15 = v4;\n
            v0 = v15 - 7059;\n
            v5 = cgc_snprintf(v7, 13, v15 - 7070);\n
        }\n
        else if (0 <= v6)\n
        {\n
            v17 = v4;\n
            v0 = v17 - 7027;\n
            v1 = v6;\n
            v5 = cgc_snprintf(v7, 19, v17 - 7047);\n
        }\n
        else\n
        {\n
            v16 = v4;\n
            v0 = v16 - 7040;\n
            v1 = -(v6);\n
            v5 = cgc_snprintf(v7, 18, v16 - 7047);\n
        }\n
        v7 = v5 + v7;\n
        v6 = cgc_get_bits_from_sixer(&v8);\n
        if (v6 == 1023)\n
        {\n
            v18 = v4;\n
            v0 = v18 - 7013;\n
            v5 = cgc_snprintf(v7, 11, v18 - 7070);\n
        }\n
        else if (1020 < v6)\n
        {\n
            v19 = v4;\n
            v0 = v19 - 7003;\n
            v5 = cgc_snprintf(v7, 9, v19 - 7070);\n
        }\n
        else\n
        {\n
            v3 = v7;\n
            v20 = v6;\n
            v0 = (v20 >> 31 CONCAT v20) /m 10;\n
            v5 = cgc_snprintf(v3, 8, v4 - 6995);\n
        }\n
        v7 = v5 + v7;\n
        cgc_get_bits_from_sixer(&v8);\n
        v6 = cgc_get_bits_from_sixer(&v8);\n
        if (5460000 < v6)\n
            v6 = cgc_sixer_bits_twos_to_sint(v6);\n
        if (v6 == 5460000)\n
        {\n
            v22 = v4;\n
            v0 = v22 - 6988;\n
            v5 = cgc_snprintf(v7, 9, v22 - 7070);\n
        }\n
        else if (!v6)\n
        {\n
            v0 = v6;\n
            v5 = cgc_snprintf(v7, 3, v4 - 7044);\n
        }\n
        else if (0 < v6)\n
        {\n
            v0 = v6;\n
            v5 = cgc_snprintf(v7, 10, v4 - 6980);\n
        }\n
        else\n
        {\n
            v0 = -(v6);\n
            v5 = cgc_snprintf(v7, 10, v4 - 6975);\n
        }\n
        v7 = v5 + v7;\n
        v6 = cgc_get_bits_from_sixer(&v8);\n
        if (10860000 < v6)\n
            v6 = cgc_sixer_bits_twos_to_sint(v6);\n
        if (v6 == 10860000)\n
        {\n
            v23 = v4;\n
            v0 = v23 - 6970;\n
            v5 = cgc_snprintf(v7, 9, v23 - 7070);\n
        }\n
        else if (!v6)\n
        {\n
            v0 = v6;\n
            v5 = cgc_snprintf(v7, 3, v4 - 7044);\n
        }\n
        else if (0 < v6)\n
        {\n
            v0 = v6;\n
            v5 = cgc_snprintf(v7, 11, v4 - 6962);\n
        }\n
        else\n
        {\n
            v0 = -(v6);\n
            v5 = cgc_snprintf(v7, 11, v4 - 6957);\n
        }\n
        v7 = v5 + v7;\n
        v6 = cgc_get_bits_from_sixer(&v8);\n
        if (v6 == 3600)\n
        {\n
            v24 = v4;\n
            v0 = v24 - 6952;\n
            v5 = cgc_snprintf(v7, 12, v24 - 7070);\n
        }\n
        else if (3590 >= v6)\n
        {\n
            v2 = v7;\n
            v25 = v6;\n
            v0 = (v25 >> 31 CONCAT v25) /m 10;\n
            v5 = cgc_snprintf(v2, 8, v4 - 6941);\n
        }\n
        else\n
        {\n
            v9 = -51;\n
            return v9;\n
        }\n
        v7 = v5 + v7;\n
        v6 = cgc_get_bits_from_sixer(&v8);\n
        if (v6 == 511)\n
        {\n
            v27 = v4;\n
            v0 = v27 - 6935;\n
            v5 = cgc_snprintf(v7, 13, v27 - 7070);\n
        }\n
        else if (359 >= v6)\n
        {\n
            v0 = v6;\n
            v5 = cgc_snprintf(v7, 10, v4 - 6923);\n
        }\n
        else\n
        {\n
            v9 = -51;\n
            return v9;\n
        }\n
        v7 = v5 + v7;\n
        cgc_get_bits_from_sixer(&v8);\n
        v6 = cgc_get_bits_from_sixer(&v8);\n
        if (v6 == 3)\n
        {\n
            v9 = -51;\n
            return v9;\n
        }\n
        v28 = v4;\n
        v0 = *((v28 + v6 * 4 + 108));\n
        v5 = cgc_snprintf(v7, 24, v28 - 6914);\n
        v7 = v5 + v7;\n
        v9 = 0;\n
        return v9;\n
    }\n
    v9 = -51;\n
    return v9;\n
}\n
",
  "4207434:sub_40334a": null,
  "4207440:cgc_parse_msg_type_4": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parse_msg_type_4(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x2c]\n
    void* v2;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x20]\n
    char v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // ebx\n
    unsigned int v13;  // ebx\n
    unsigned int v14;  // ebx\n
    unsigned int v15;  // ebx\n
    unsigned int v16;  // ebx\n
    unsigned int v17;  // ebx\n
    unsigned int v18;  // ebx\n
    unsigned int v19;  // ebx\n
\n
    v7 = v9;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_init_sixer(&v5);\n
    v4 = v8;\n
    v3 = 0;\n
    v2 = 0;\n
    if (cgc_sixer_strlen(&v5) != 138)\n
    {\n
        v6 = -51;\n
        return v6;\n
    }\n
    v3 = cgc_get_bits_from_sixer(&v5);\n
    if (v3 != 4)\n
    {\n
        v6 = -51;\n
        return v6;\n
    }\n
    v10 = v1;\n
    v0 = v10 - 6910;\n
    v2 = cgc_snprintf(v4, 8, v10 - 7070);\n
    v4 = v2 + v4;\n
    v3 = cgc_get_bits_from_sixer(&v5);\n
    if (0 > v3)\n
    {\n
        v6 = -51;\n
        return v6;\n
    }\n
    v0 = v3;\n
    v2 = cgc_snprintf(v4, 11, v1 - 7044);\n
    v4 = v2 + v4;\n
    v3 = cgc_get_bits_from_sixer(&v5);\n
    if (!v3)\n
    {\n
        v11 = v1;\n
        v0 = v11 - 6903;\n
        v2 = cgc_snprintf(v4, 5, v11 - 7070);\n
    }\n
    else\n
    {\n
        v0 = v3;\n
        v2 = cgc_snprintf(v4, 6, v1 - 7044);\n
    }\n
    v4 = v2 + v4;\n
    v3 = cgc_get_bits_from_sixer(&v5);\n
    if (12 < v3)\n
    {\n
        v6 = -51;\n
        return v6;\n
    }\n
    if (!v3)\n
    {\n
        v12 = v1;\n
        v0 = v12 - 6903;\n
        v2 = cgc_snprintf(v4, 5, v12 - 7070);\n
    }\n
    else\n
    {\n
        v0 = v3;\n
        v2 = cgc_snprintf(v4, 4, v1 - 7044);\n
    }\n
    v4 = v2 + v4;\n
    v3 = cgc_get_bits_from_sixer(&v5);\n
    if (31 < v3)\n
    {\n
        v6 = -51;\n
        return v6;\n
    }\n
    if (!v3)\n
    {\n
        v13 = v1;\n
        v0 = v13 - 6903;\n
        v2 = cgc_snprintf(v4, 5, v13 - 7070);\n
    }\n
    else\n
    {\n
        v0 = v3;\n
        v2 = cgc_snprintf(v4, 4, v1 - 7044);\n
    }\n
    v4 = v2 + v4;\n
    v3 = cgc_get_bits_from_sixer(&v5);\n
    if (24 < v3)\n
    {\n
        v6 = -51;\n
        return v6;\n
    }\n
    if (v3 == 24)\n
    {\n
        v14 = v1;\n
        v0 = v14 - 6903;\n
        v2 = cgc_snprintf(v4, 5, v14 - 7070);\n
    }\n
    else\n
    {\n
        v0 = v3;\n
        v2 = cgc_snprintf(v4, 4, v1 - 7044);\n
    }\n
    v4 = v2 + v4;\n
    v3 = cgc_get_bits_from_sixer(&v5);\n
    if (60 < v3)\n
    {\n
        v6 = -51;\n
        return v6;\n
    }\n
    if (v3 == 60)\n
    {\n
        v15 = v1;\n
        v0 = v15 - 6903;\n
        v2 = cgc_snprintf(v4, 5, v15 - 7070);\n
    }\n
    else\n
    {\n
        v0 = v3;\n
        v2 = cgc_snprintf(v4, 4, v1 - 7044);\n
    }\n
    v4 = v2 + v4;\n
    v3 = cgc_get_bits_from_sixer(&v5);\n
    if (60 < v3)\n
    {\n
        v6 = -51;\n
        return v6;\n
    }\n
    if (v3 == 60)\n
    {\n
        v16 = v1;\n
        v0 = v16 - 6903;\n
        v2 = cgc_snprintf(v4, 5, v16 - 7070);\n
    }\n
    else\n
    {\n
        v0 = v3;\n
        v2 = cgc_snprintf(v4, 4, v1 - 7044);\n
    }\n
    v4 = v2 + v4;\n
    v3 = cgc_get_bits_from_sixer(&v5);\n
    v3 = cgc_get_bits_from_sixer(&v5);\n
    if (5460000 < v3)\n
        v3 = cgc_sixer_bits_twos_to_sint(v3);\n
    if (v3 == 5460000)\n
    {\n
        v17 = v1;\n
        v0 = v17 - 6988;\n
        v2 = cgc_snprintf(v4, 9, v17 - 7070);\n
    }\n
    else if (!v3)\n
    {\n
        v0 = v3;\n
        v2 = cgc_snprintf(v4, 3, v1 - 7044);\n
    }\n
    else if (0 < v3)\n
    {\n
        v0 = v3;\n
        v2 = cgc_snprintf(v4, 10, v1 - 6980);\n
    }\n
    else\n
    {\n
        v0 = -(v3);\n
        v2 = cgc_snprintf(v4, 10, v1 - 6975);\n
    }\n
    v4 = v2 + v4;\n
    v3 = cgc_get_bits_from_sixer(&v5);\n
    if (10860000 < v3)\n
        v3 = cgc_sixer_bits_twos_to_sint(v3);\n
    if (v3 == 10860000)\n
    {\n
        v18 = v1;\n
        v0 = v18 - 6970;\n
        v2 = cgc_snprintf(v4, 9, v18 - 7070);\n
    }\n
    else if (!v3)\n
    {\n
        v0 = v3;\n
        v2 = cgc_snprintf(v4, 3, v1 - 7044);\n
    }\n
    else if (0 < v3)\n
    {\n
        v0 = v3;\n
        v2 = cgc_snprintf(v4, 11, v1 - 6962);\n
    }\n
    else\n
    {\n
        v0 = -(v3);\n
        v2 = cgc_snprintf(v4, 11, v1 - 6957);\n
    }\n
    v4 = v2 + v4;\n
    v3 = cgc_get_bits_from_sixer(&v5);\n
    if (8 < v3)\n
    {\n
        v6 = -51;\n
        return v6;\n
    }\n
    v19 = v1;\n
    v0 = *((v19 + v3 * 4 + 120));\n
    v2 = cgc_snprintf(v4, 30, v19 - 6914);\n
    v6 = 0;\n
    return v6;\n
}\n
",
  "4209494:sub_403b56": null,
  "4209504:cgc_parse_msg_type_5": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parse_msg_type_5(char *v13, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x50]\n
    unsigned int v1;  // [bp-0x40]\n
    void* v2;  // [bp-0x3c], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x38], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x34], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x30], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x2c], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x24], Other Possible Types: unsigned int\n
    char *v9;  // [bp-0x20], Other Possible Types: unsigned int\n
    char v10;  // [bp-0x1c]\n
    unsigned int v11;  // [bp-0xc]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    unsigned int v15;  // ebx\n
    unsigned int v16;  // ebx\n
    unsigned int v17;  // ebx\n
    unsigned int v18;  // ebx\n
    unsigned int v19;  // ebx\n
    unsigned int v20;  // ebx\n
\n
    v12 = v14;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_init_sixer(&v10);\n
    v9 = v13;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = 0;\n
    v5 = 0;\n
    if (cgc_sixer_strlen(&v10) != 384)\n
    {\n
        v11 = -51;\n
        return v11;\n
    }\n
    v8 = cgc_get_bits_from_sixer(&v10);\n
    if (v8 != 5)\n
    {\n
        v11 = -51;\n
        return v11;\n
    }\n
    v15 = v1;\n
    v0 = v15 - 6899;\n
    v7 = cgc_snprintf(v9, 8, v15 - 7070);\n
    v9 = &v9[v7];\n
    v8 = cgc_get_bits_from_sixer(&v10);\n
    if (0 > v8)\n
    {\n
        v11 = -51;\n
        return v11;\n
    }\n
    v0 = v8;\n
    v7 = cgc_snprintf(v9, 11, v1 - 7044);\n
    v9 = &v9[v7];\n
    v8 = cgc_get_bits_from_sixer(&v10);\n
    if (0 > v8)\n
    {\n
        v11 = -51;\n
        return v11;\n
    }\n
    v0 = v8;\n
    v7 = cgc_snprintf(v9, 11, v1 - 7044);\n
    v9 = &v9[v7];\n
    v5 = 0;\n
    v4 = 0;\n
    while (true)\n
    {\n
        if (v4 >= 7)\n
        {\n
            *(v9) = 44;\n
            v9 += 1;\n
            v5 = 0;\n
            v3 = 0;\n
            while (v3 < 20)\n
            {\n
                v8 = cgc_get_bits_from_sixer(&v10);\n
                if (0 > v8)\n
                {\n
                    v11 = -51;\n
                    return v11;\n
                }\n
                v6 = cgc_sixer_bits_to_ASCII_str_char();\n
                if (v6 == 64)\n
                {\n
LABEL_403e44:\n
                    v5 = 1;\n
                    goto LABEL_403e63;\n
                }\n
                else\n
                {\n
                    if (1 == v5)\n
                        goto LABEL_403e44;\n
                    *(v9) = v6;\n
                    v9 += 1;\n
LABEL_403e63:\n
                    v3 += 1;\n
                    goto LABEL_403e76;\n
                }\n
            }\n
        }\n
        v8 = cgc_get_bits_from_sixer(&v10);\n
        if (0 > v8)\n
        {\n
            v11 = -51;\n
            return v11;\n
        }\n
        v6 = cgc_sixer_bits_to_ASCII_str_char();\n
        if (v6 == 64)\n
        {\n
LABEL_403d87:\n
            v5 = 1;\n
            goto LABEL_403da6;\n
        }\n
        else\n
        {\n
            if (1 == v5)\n
                goto LABEL_403d87;\n
            *(v9) = v6;\n
            v9 += 1;\n
LABEL_403da6:\n
            v4 += 1;\n
        }\n
    }\n
LABEL_403e76:\n
    *(v9) = 44;\n
    v9 += 1;\n
    v8 = cgc_get_bits_from_sixer(&v10);\n
    if (8 < v8)\n
    {\n
        v11 = -51;\n
        return v11;\n
    }\n
    v16 = v1;\n
    v0 = *((v16 + v8 * 4 + 120));\n
    v7 = cgc_snprintf(v9, 30, v16 - 7070);\n
    v9 = &v9[v7];\n
    v8 = cgc_get_bits_from_sixer(&v10);\n
    if (12 < v8)\n
    {\n
        v11 = -51;\n
        return v11;\n
    }\n
    if (!v8)\n
    {\n
        v17 = v1;\n
        v0 = v17 - 6903;\n
        v7 = cgc_snprintf(v9, 5, v17 - 7070);\n
    }\n
    else\n
    {\n
        v0 = v8;\n
        v7 = cgc_snprintf(v9, 4, v1 - 7044);\n
    }\n
    v9 = &v9[v7];\n
    v8 = cgc_get_bits_from_sixer(&v10);\n
    if (31 < v8)\n
    {\n
        v11 = -51;\n
        return v11;\n
    }\n
    if (!v8)\n
    {\n
        v18 = v1;\n
        v0 = v18 - 6903;\n
        v7 = cgc_snprintf(v9, 5, v18 - 7070);\n
    }\n
    else\n
    {\n
        v0 = v8;\n
        v7 = cgc_snprintf(v9, 4, v1 - 7044);\n
    }\n
    v9 = &v9[v7];\n
    v8 = cgc_get_bits_from_sixer(&v10);\n
    if (24 < v8)\n
    {\n
        v11 = -51;\n
        return v11;\n
    }\n
    if (v8 == 24)\n
    {\n
        v19 = v1;\n
        v0 = v19 - 6903;\n
        v7 = cgc_snprintf(v9, 5, v19 - 7070);\n
    }\n
    else\n
    {\n
        v0 = v8;\n
        v7 = cgc_snprintf(v9, 4, v1 - 7044);\n
    }\n
    v9 = &v9[v7];\n
    v8 = cgc_get_bits_from_sixer(&v10);\n
    if (60 < v8)\n
    {\n
        v11 = -51;\n
        return v11;\n
    }\n
    if (v8 == 60)\n
    {\n
        v20 = v1;\n
        v0 = v20 - 6903;\n
        v7 = cgc_snprintf(v9, 5, v20 - 7070);\n
    }\n
    else\n
    {\n
        v0 = v8;\n
        v7 = cgc_snprintf(v9, 4, v1 - 7044);\n
    }\n
    v9 = &v9[v7];\n
    v8 = cgc_get_bits_from_sixer(&v10);\n
    v0 = v8;\n
    v7 = cgc_snprintf(v9, 5, v1 - 7044);\n
    v9 = &v9[v7];\n
    v5 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 >= 20)\n
        {\n
            *(v9) = 46;\n
            v9 += 1;\n
            v11 = 0;\n
            return v11;\n
        }\n
        v8 = cgc_get_bits_from_sixer(&v10);\n
        if (0 > v8)\n
        {\n
            v11 = -51;\n
            return v11;\n
        }\n
        v6 = cgc_sixer_bits_to_ASCII_str_char();\n
        if (v6 == 64)\n
        {\n
LABEL_404260:\n
            v5 = 1;\n
            goto LABEL_40427f;\n
        }\n
        else\n
        {\n
            if (1 == v5)\n
                goto LABEL_404260;\n
            *(v9) = v6;\n
            v9 += 1;\n
LABEL_40427f:\n
            v2 += 1;\n
        }\n
    }\n
}\n
",
  "4211377:sub_4042b1": null,
  "4211392:cgc_parse_sentence": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char field_10;\n
    char field_11;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parse_sentence(unsigned int v11, struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x29]\n
    void* v3;  // [bp-0x28]\n
    void* v4;  // [bp-0x24]\n
    void* v5;  // [bp-0x20]\n
    void* v6;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x18]\n
    void* v8;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0x10]\n
    unsigned int v10;  // [bp-0x8]\n
    unsigned int v12;  // ebx\n
    struct_0 *v13;  // eax\n
\n
    v10 = v12;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = 0;\n
    v7 = \"!AAAAA\";\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    v1 = cgc_get_sentence_start(v11);\n
    if (v1)\n
    {\n
        v9 = v1;\n
        return v9;\n
    }\n
    else if (cgc_strncmp(v7, v8, 6))\n
    {\n
        v9 = -50;\n
        return v9;\n
    }\n
    else if (cgc_is_checksum_correct() == 1)\n
    {\n
        v8 = cgc_get_next_field();\n
        if (!v8)\n
        {\n
            v9 = -50;\n
            return v9;\n
        }\n
        v1 = cgc_field_to_uint(v8);\n
        if (v1)\n
        {\n
            v9 = v1;\n
            return v9;\n
        }\n
        v8 = cgc_get_next_field();\n
        if (!v8)\n
        {\n
            v9 = -50;\n
            return v9;\n
        }\n
        v1 = cgc_field_to_uint(v8);\n
        if (v1)\n
        {\n
            v9 = v1;\n
            return v9;\n
        }\n
        v8 = cgc_get_next_field();\n
        if (!v8)\n
        {\n
            v9 = -50;\n
            return v9;\n
        }\n
        v1 = cgc_field_to_uint(v8);\n
        if (v1)\n
        {\n
            v9 = v1;\n
            return v9;\n
        }\n
        else if (a0->field_10 != 1)\n
        {\n
            if (a0->field_10 != 2)\n
            {\n
                v9 = -50;\n
                return v9;\n
            }\n
            if (a0->field_0 + 1 == v5 && a0->field_4 == v4 && a0->field_8 == v3 && v5 <= v4)\n
            {\n
                v13 = a0;\n
                v13->field_0 = v13->field_0 + 1;\n
LABEL_404586:\n
                v8 = cgc_get_next_field();\n
                v6 = cgc_get_next_field() - 1;\n
                a0->field_c = cgc_fieldncpy(v8, a0->field_c);\n
                if (a0->field_10 == 1)\n
                {\n
                    a0->field_11 = cgc_get_msg_type();\n
                    if (a0->field_11 != 1 && a0->field_11 != 4 && a0->field_11 != 5)\n
                    {\n
                        v9 = -50;\n
                        return v9;\n
                    }\n
                }\n
                if (a0->field_4 == a0->field_0)\n
                    a0->field_10 = 3;\n
                else\n
                    a0->field_10 = 2;\n
                v9 = 0;\n
                return v9;\n
            }\n
            v9 = -50;\n
            return v9;\n
        }\n
        else\n
        {\n
            if (v5 == 1 && v5 <= v4)\n
            {\n
                a0->field_4 = v4;\n
                a0->field_0 = v5;\n
                a0->field_8 = v3;\n
                goto LABEL_404586;\n
            }\n
            v9 = -50;\n
            return v9;\n
        }\n
    }\n
    else\n
    {\n
        v9 = -50;\n
        return v9;\n
    }\n
}\n
",
  "4212355:sub_404683": null,
  "4212368:cgc_get_sentence_start": "int cgc_get_sentence_start(char *v2, unsigned int *a0)\n
{\n
    char v0;  // [bp-0x9]\n
    unsigned int v1;  // [bp-0x8]\n
\n
    if (!v2)\n
    {\n
        v1 = -49;\n
        return v1;\n
    }\n
    else if (a0)\n
    {\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (*(v2) != 33)\n
                v0 = 0 != *(v2);\n
            if (!(v0 & 1))\n
                break;\n
            v2 += 1;\n
        }\n
        if (*(v2) == 33)\n
        {\n
            *(a0) = v2;\n
            v1 = 0;\n
            return v1;\n
        }\n
        *(a0) = 0;\n
        v1 = -50;\n
        return v1;\n
    }\n
    else\n
    {\n
        v1 = -49;\n
        return v1;\n
    }\n
}\n
",
  "4212564:sub_404754": null,
  "4212576:cgc_is_checksum_correct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_is_checksum_correct(char *v9)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    char v2;  // [bp-0x1d]\n
    unsigned int v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x15]\n
    void* v5;  // [bp-0x14]\n
    char v6[3];  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
\n
    v8 = v10;\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    *(&v6) = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    if (cgc_get_sentence_start(v9, v6))\n
    {\n
        v7 = -50;\n
        return v7;\n
    }\n
    *(&v6) = &v6[1];\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (*(v6))\n
            v2 = 42 != *(v6);\n
        if (!(v2 & 1))\n
            break;\n
        v4 ^= v6[0];\n
        v6 = &v6[1];\n
    }\n
    if (*(v6) != 42)\n
    {\n
        v7 = -50;\n
        return v7;\n
    }\n
    if (cgc_is_hex_digit(*((v6 + 1))) && cgc_is_hex_digit(*((v6 + 2))))\n
    {\n
        v1 = v4;\n
        v0 = cgc_ascii_hex_to_bin(*((v6 + 1))) * 16;\n
        if (v1 == v0 + cgc_ascii_hex_to_bin(*((v6 + 2))))\n
        {\n
            v7 = 1;\n
            return v7;\n
        }\n
        v7 = 0;\n
        return v7;\n
    }\n
    v7 = -50;\n
    return v7;\n
}\n
",
  "4212959:sub_4048df": null,
  "4212960:cgc_get_next_field": "int cgc_get_next_field(char *v2)\n
{\n
    char v0;  // [bp-0x9]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v2)\n
        {\n
            v0 = 0;\n
            if (*(v2))\n
            {\n
                v0 = 0;\n
                if (*(v2) != 42)\n
                    v0 = 44 != *(v2);\n
            }\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
    }\n
    if (v2 && *(v2))\n
    {\n
        v1 = v2 + 1;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
",
  "4213135:sub_40498f": null,
  "4213136:cgc_field_to_uint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_field_to_uint(char *v4, unsigned int *a0)\n
{\n
    char v0;  // [bp-0x15]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int *v5;  // eax\n
    unsigned int *v6;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    *(a0) = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v4)\n
        {\n
            v0 = 0;\n
            if (*(v4))\n
            {\n
                v0 = 0;\n
                if (*(v4) != 42)\n
                    v0 = 44 != *(v4);\n
            }\n
        }\n
        if (!(v0 & 1))\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v5 = a0;\n
        *(v5) = *(v5) * 10;\n
        v2 = cgc_ascii_hex_to_bin(*(v4));\n
        if (0 > v2)\n
        {\n
            v3 = v2;\n
            return v3;\n
        }\n
        v6 = a0;\n
        *(v6) = v2 + *(v6);\n
        v4 += 1;\n
    }\n
}\n
",
  "4213368:sub_404a78": null,
  "4213376:cgc_fieldncpy": "int cgc_fieldncpy(char *v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (a1)\n
        {\n
            v1 = 0;\n
            if (v2)\n
            {\n
                v1 = 0;\n
                if (a0)\n
                {\n
                    v1 = 0;\n
                    if (*(v2))\n
                    {\n
                        v1 = 0;\n
                        if (*(v2) != 42)\n
                            v1 = 44 != *(v2);\n
                    }\n
                }\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        *(a0) = *(v2);\n
        v2 += 1;\n
        a0 += 1;\n
        a1 -= 1;\n
    }\n
    if (a0)\n
        *(a0) = 0;\n
    return a0;\n
}\n
",
  "4213584:cgc_reset_sentence_struct": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char field_10;\n
    char field_11;\n
    char padding_12[2];\n
    char *field_14;\n
} struct_0;\n
\n
int cgc_reset_sentence_struct(struct_0 *v0)\n
{\n
    v0->field_0 = 0;\n
    v0->field_4 = 0;\n
    v0->field_8 = 0;\n
    v0->field_10 = 1;\n
    v0->field_11 = 0;\n
    cgc_memset(v0->field_14, 0, 65);\n
    v0->field_c = v0->field_14;\n
    return v0;\n
}\n
",
  "4213699:sub_404bc3": null,
  "4213712:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v13, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int v1;  // [bp-0x40]\n
    char v2;  // [bp-0x39]\n
    void* v3;  // [bp-0x38], Other Possible Types: unsigned int, char *\n
    unsigned int v4;  // [bp-0x34]\n
    char *v5;  // [bp-0x30]\n
    char v6;  // [bp-0x2c]\n
    char v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0x18]\n
    void* v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v10;  // [bp-0xd]\n
    void* v11;  // [bp-0xc]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
\n
    v12 = v14;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = cgc_malloc(65);\n
    cgc_reset_sentence_struct(&v6);\n
    while (true)\n
    {\n
        v5 = cgc_calloc(65);\n
        v4 = cgc_calloc(140);\n
        v3 = 0;\n
        v2 = 1;\n
        v9 = cgc_recv_until_delim(0, v5, 65, 7);\n
        if (0 >= v9)\n
            break;\n
        if (v5[1 + v9] != 7)\n
            break;\n
        v5[1 + v9] = 0;\n
        if (cgc_parse_sentence(v5, &v6))\n
        {\n
            v3 = v1 - 6847;\n
        }\n
        else if (v7 != 3)\n
        {\n
            v3 = v1 - 6868;\n
            v2 = 0;\n
        }\n
        else if (cgc_to_english(v4, &v6))\n
        {\n
            v3 = v1 - 6885;\n
        }\n
        else\n
        {\n
            v3 = v4;\n
        }\n
        v0 = v3;\n
        cgc_send(v0, cgc_strlen(v3));\n
        if (v2 == 1)\n
            cgc_reset_sentence_struct(&v6);\n
        cgc_free(v4);\n
        cgc_free(v5);\n
    }\n
    v10 = 247;\n
    return v10;\n
}\n
",
  "4214192:cgc_get_byte_mask": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_byte_mask()\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    char v2;  // [bp-0x5]\n
    unsigned int v3;  // [bp+0x4]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v3;\n
    if (v1 > 5)\n
    {\n
        v2 = 0;\n
        return;\n
    }\n
    goto *(((stack_base)[16] + (stack_base)[12] * 4 - 6828)) + (stack_base)[16];\n
}\n
",
  "4214316:sub_404e2c": null,
  "4214320:cgc_init_sixer": "int cgc_init_sixer(unsigned int v0[3], unsigned int a0)\n
{\n
    v0[0] = 0;\n
    v0[2] = a0;\n
    v0[1] = v0[2];\n
    return v0;\n
}\n
",
  "4214361:sub_404e59": null,
  "4214368:cgc_sixer_strlen": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char *field_4;\n
} struct_0;\n
\n
int cgc_sixer_strlen(struct_0 *v0)\n
{\n
    return cgc_strlen(v0->field_4) * 6 - v0->field_0;\n
}\n
",
  "4214416:cgc_get_msg_type": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_msg_type(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1[3];  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_init_sixer(v1, v3);\n
    v5 = v2;\n
    return cgc_get_bits_from_sixer(v1);\n
}\n
",
  "4214490:sub_404eda": null,
  "4214496:cgc_get_bits_from_sixer": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_bits_from_sixer(struct_0 *v11, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    char v6;  // [bp-0x13]\n
    char v7;  // [bp-0x12]\n
    char v8;  // [bp-0x11]\n
    void* v9;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v10;  // [bp-0xc]\n
    struct_0 *v12;  // eax\n
    struct_0 *v13;  // eax\n
    struct_0 *v14;  // eax\n
\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = 0;\n
    while (true)\n
    {\n
        if (0 < a0)\n
        {\n
            v0 = v11->field_4->field_0;\n
            v8 = cgc_unarmor_ASCII_char();\n
            if (0 > v8)\n
            {\n
                v10 = -51;\n
                return v10;\n
            }\n
            else if (6 > a0)\n
            {\n
                if (a0 > 6 - v11->field_0)\n
                    v7 = 6 - v11->field_0;\n
                else\n
                    v7 = a0;\n
                v6 = (6 - v11->field_0) - v7;\n
                v2 = v9 << (v7 & 31);\n
                v1 = v8;\n
                v0 = v11->field_0;\n
                v9 = v2 | (v1 & cgc_get_byte_mask()) >> (v6 & 31);\n
                if (v11->field_0 + v7 == 6)\n
                {\n
                    v13 = v11;\n
                    v13->field_4 = v13->field_4 + 1;\n
                    v11->field_0 = 0;\n
                }\n
                else\n
                {\n
                    v14 = v11;\n
                    v14->field_0 = v7 + v14->field_0;\n
                }\n
                a0 -= v7;\n
            }\n
            else\n
            {\n
                v12 = v11;\n
                v12->field_4 = v12->field_4 + 1;\n
                if (v11->field_0)\n
                {\n
                    v4 = v9 << ((6 - v11->field_0) & 31);\n
                    v3 = v8;\n
                    v0 = v11->field_0;\n
                    v9 = v4 | v3 & cgc_get_byte_mask();\n
                    a0 -= 6 - v11->field_0;\n
                    v11->field_0 = 0;\n
                }\n
                else\n
                {\n
                    v9 = v9 * 64 + v8;\n
                    a0 -= 6;\n
                }\n
            }\n
        }\n
        else\n
        {\n
            v10 = v9;\n
            return v10;\n
        }\n
    }\n
}\n
",
  "4214986:sub_4050ca": null,
  "4214992:cgc_unarmor_ASCII_char": "int cgc_unarmor_ASCII_char(char v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    if (119 >= v2)\n
    {\n
        if (87 >= v2)\n
        {\n
LABEL_405113:\n
            v2 -= 48;\n
            if (40 <= v2)\n
                v2 -= 8;\n
            v1 = v2;\n
            return v1;\n
        }\n
        else if (96 <= v2)\n
        {\n
            goto LABEL_405113;\n
        }\n
    }\n
    v1 = 255;\n
    return v1;\n
}\n
",
  "4215111:sub_405147": null,
  "4215120:cgc_sixer_bits_twos_to_sint": "int cgc_sixer_bits_twos_to_sint(unsigned int v1, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    if (0 >= (v1 & a0))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = ((v1 ^ -1) + 1 & a0 - 1) * -1;\n
    return v0;\n
}\n
",
  "4215198:sub_40519e": null,
  "4215200:cgc_sixer_bits_to_ASCII_str_char": "int cgc_sixer_bits_to_ASCII_str_char(char v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    if (63 < v2)\n
    {\n
        v1 = 255;\n
        return v1;\n
    }\n
    else if (32 > v2)\n
    {\n
        v1 = v2 + 64;\n
        return v1;\n
    }\n
    else\n
    {\n
        v1 = v2;\n
        return v1;\n
    }\n
}\n
",
  "4215280:_fini": "int _fini()\n
{\n
    return;\n
}\n
",
  "5242880:__libc_start_main": null,
  "5242884:cgc__terminate": null,
  "5242888:cgc_transmit": null,
  "5242892:cgc_allocate": null,
  "5242896:cgc_receive": null,
  "6295628:UnresolvableJumpTarget": null,
  "6295632:UnresolvableCallTarget": null
}
